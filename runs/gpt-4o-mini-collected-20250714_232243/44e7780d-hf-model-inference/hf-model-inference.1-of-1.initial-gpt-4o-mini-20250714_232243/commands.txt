['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
'pip install flask torch transformers\n'
'mkdir -p /app/model_cache/sentiment_model\n'
'python -c "from transformers import AutoModelForSequenceClassification, AutoTokenizer; model = AutoModelForSequenceClassification.from_pretrained(\'distilbert-base-uncased-finetuned-sst-2-english\'); tokenizer = AutoTokenizer.from_pretrained(\'distilbert-base-uncased-finetuned-sst-2-english\'); model.save_pretrained(\'/app/model_cache/sentiment_model\'); tokenizer.save_pretrained(\'/app/model_cache/sentiment_model\')"\n'
'echo \'from flask import Flask, request, jsonify\\nimport torch\\nfrom transformers import AutoModelForSequenceClassification, AutoTokenizer\\n\\napp = Flask(__name__)\\nmodel = AutoModelForSequenceClassification.from_pretrained("/app/model_cache/sentiment_model")\\ntokenizer = AutoTokenizer.from_pretrained("/app/model_cache/sentiment_model")\\n\\n@app.route("/sentiment", methods=["POST"])\\ndef sentiment_analysis():\\n    data = request.get_json()\\n    text = data["text"]\\n    inputs = tokenizer(text, return_tensors="pt")\\n    with torch.no_grad():\\n        outputs = model(**inputs)\\n    scores = outputs.logits.softmax(dim=1).numpy()[0]\\n    sentiment = "positive" if scores[1] > scores[0] else "negative"\\n    return jsonify({"sentiment": sentiment, "confidence": {"positive": float(scores[1]), "negative": float(scores[0])}})\\n\\nif __name__ == \'__main__\':\\n    app.run(host=\'0.0.0.0\', port=5000)" > /app/app.py\n'
'nohup python /app/app.py &\n'
'echo \'import requests\\n\\ntexts = ["I love this!", "This is bad.", "It\'s okay."]\\nfor text in texts:\\n    response = requests.post("http://localhost:5000/sentiment", json={"text": text})\\n    print(response.json())\' > /app/test_script.py\n'
'echo \'import requests\\n\\ntexts = ["I love this!", "This is bad.", "It\\\'s okay."]\\nfor text in texts:\\n    response = requests.post("http://localhost:5000/sentiment", json={"text": text})\\n    print(response.json())\' > /app/test_script.py\n'
'echo \'import requests\\n\\ntexts = ["I love this!", "This is bad.", "It\\\'s okay."]\\nfor text in texts:\\n    response = requests.post("http://localhost:5000/sentiment", json={"text": text})\\n    print(response.json())\' > /app/test_script.py\n'
'echo \'import requests\\n\\ntexts = ["I love this!", "This is bad.", "It\\\'s okay."]\\nfor text in texts:\\n    response = requests.post("http://localhost:5000/sentiment", json={"text": text})\\n    print(response.json())\' > /app/test_script.py\n'
'echo "import requests\\n\\ntexts = [\'I love this!\', \'This is bad.\', \'It\\\'s okay.\']\\nfor text in texts:\\n    response = requests.post(\'http://localhost:5000/sentiment\', json={\'text\': text})\\n    print(response.json())" > /app/test_script.py\n'
'python /app/test_script.py\n'
'ps aux | grep app.py\n'
'ps aux | grep python\n'
'nohup python /app/app.py &\n'
'ps aux | grep python\n'
'nohup python /app/app.py &\n'
'sleep 5\n'
'nohup python /app/app.py &\n'
'sleep 5\n'
'nohup python /app/app.py &\n'
'sleep 5\n'
'tail -n 50 /app/app.log\n'
'nohup python /app/app.py &\n'
'sleep 5\n'
'nohup python /app/app.py &\n'
'sleep 5\n'
'nohup python /app/app.py > /app/app.log 2>&1 &\n'
'sleep 5\n'
'tail -n 50 /app/app.log\n'
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
