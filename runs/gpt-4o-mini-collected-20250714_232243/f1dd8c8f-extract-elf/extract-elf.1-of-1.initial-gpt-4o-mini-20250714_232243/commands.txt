['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
'echo "const fs = require(\'fs\');\\nconst process = require(\'process\');\\n\\nif (process.argv.length < 3) {\\n    console.error(\'Usage: node extract.js <file>\');\\n    process.exit(1);\\n}\\n\\nconst file = process.argv[2];\\n\\nfs.readFile(file, (err, data) => {\\n    if (err) {\\n        console.error(err);\\n        return;\\n    }\\n    const memoryValues = {};\\n    for (let i = 0; i < data.length; i += 4) {\\n        const address = (i + 4194304).toString();\\n        const value = data.readUInt32LE(i);\\n        memoryValues[address] = value;\\n    }\\n    console.log(JSON.stringify(memoryValues));\\n});" > extract.js\n'
'node extract.js /app/a.out > out.json\n'
"cat << 'EOF' > extract.js\\nconst fs = require('fs');\\nconst process = require('process');\\n\\nif (process.argv.length < 3) {\\n    console.error('Usage: node extract.js <file>');\\n    process.exit(1);\\n}\\n\\nconst file = process.argv[2];\\n\\nfs.readFile(file, (err, data) => {\\n    if (err) {\\n        console.error(err);\\n        return;\\n    }\\n    const memoryValues = {};\\n    for (let i = 0; i < data.length; i += 4) {\\n        const address = (i + 4194304).toString();\\n        const value = data.readUInt32LE(i);\\n        memoryValues[address] = value;\\n    }\\n    console.log(JSON.stringify(memoryValues));\\n});\\nEOF\n"
'node extract.js /app/a.out > out.json\n'
'C-c\n'
'node extract.js /app/a.out > out.json\n'
'cat extract.js\n'
'clear\n'
'cat extract.js\n'
'nano extract.js\n'
'node extract.js /app/a.out > out.json\n'
'rm extract.js\n'
"cat << 'EOF' > extract.js\\nconst fs = require('fs');\\nconst process = require('process');\\n\\nif (process.argv.length < 3) {\\n    console.error('Usage: node extract.js <file>');\\n    process.exit(1);\\n}\\n\\nconst file = process.argv[2];\\n\\nfs.readFile(file, (err, data) => {\\n    if (err) {\\n        console.error(err);\\n        return;\\n    }\\n    const memoryValues = {};\\n    for (let i = 0; i < data.length; i += 4) {\\n        const address = (i + 4194304).toString();\\n        const value = data.readUInt32LE(i);\\n        memoryValues[address] = value;\\n    }\\n    console.log(JSON.stringify(memoryValues));\\n});\\nEOF\n"
'node extract.js /app/a.out > out.json\n'
'cat extract.js\n'
'rm extract.js\n'
"cat > extract.js << 'EOF'\\nconst fs = require('fs');\\nconst process = require('process');\\n\\nif (process.argv.length < 3) {\\n    console.error('Usage: node extract.js <file>');\\n    process.exit(1);\\n}\\n\\nconst file = process.argv[2];\\n\\nfs.readFile(file, (err, data) => {\\n    if (err) {\\n        console.error(err);\\n        return;\\n    }\\n    const memoryValues = {};\\n    for (let i = 0; i < data.length; i += 4) {\\n        const address = (i + 4194304).toString();\\n        const value = data.readUInt32LE(i);\\n        memoryValues[address] = value;\\n    }\\n    console.log(JSON.stringify(memoryValues));\\n});\\nEOF\n"
'node extract.js /app/a.out > out.json\n'
'rm extract.js\n'
"printf 'const fs = require(\\'fs\\');\\nconst process = require(\\'process\\');\\n\\nif (process.argv.length < 3) {\\n    console.error(\\'Usage: node extract.js <file>\\');\\n    process.exit(1);\\n}\\n\\nconst file = process.argv[2];\\n\\nfs.readFile(file, (err, data) => {\\n    if (err) {\\n        console.error(err);\\n        return;\\n    }\\n    const memoryValues = {};\\n    for (let i = 0; i < data.length; i += 4) {\\n        const address = (i + 4194304).toString();\\n        const value = data.readUInt32LE(i);\\n        memoryValues[address] = value;\\n    }\\n    console.log(JSON.stringify(memoryValues));\\n});\\n' > extract.js\n"
'node extract.js /app/a.out > out.json\n'
'node -v\n'
'exit\n'
'tmux new-session -s mysession\n'
'cd /app\n'
"printf 'const fs = require(\\'fs\\');\\nconst process = require(\\'process\\');\\n\\nif (process.argv.length < 3) {\\n    console.error(\\'Usage: node extract.js <file>\\');\\n    process.exit(1);\\n}\\n\\nconst file = process.argv[2];\\n\\nfs.readFile(file, (err, data) => {\\n    if (err) {\\n        console.error(err);\\n        return;\\n    }\\n    const memoryValues = {};\\n    for (let i = 0; i < data.length; i += 4) {\\n        const address = (i + 4194304).toString();\\n        const value = data.readUInt32LE(i);\\n        memoryValues[address] = value;\\n    }\\n    console.log(JSON.stringify(memoryValues));\\n});\\n' > extract.js\n"
'node extract.js /app/a.out > out.json\n'
'ls -la /app/a.out\n'
'exit\n'
'docker restart a22d2c38de1a\n'
'docker exec -it a22d2c38de1a /bin/bash\n'
'cd /app\n'
"printf 'const fs = require(\\'fs\\');\\nconst process = require(\\'process\\');\\n\\nif (process.argv.length < 3) {\\n    console.error(\\'Usage: node extract.js <file>\\');\\n    process.exit(1);\\n}\\n\\nconst file = process.argv[2];\\n\\nfs.readFile(file, (err, data) => {\\n    if (err) {\\n        console.error(err);\\n        return;\\n    }\\n    const memoryValues = {};\\n    for (let i = 0; i < data.length; i += 4) {\\n        const address = (i + 4194304).toString();\\n        const value = data.readUInt32LE(i);\\n        memoryValues[address] = value;\\n    }\\n    console.log(JSON.stringify(memoryValues));\\n});\\n' > extract.js\n"
'node extract.js /app/a.out > out.json\n'
'ls -la /app/a.out\n'
'docker stop a22d2c38de1a\n'
'docker rm a22d2c38de1a\n'
'docker run -it --name a22d2c38de1a your_image_name /bin/bash\n'
'cd /app\n'
'ls -la /app/a.out\n'
'ls -la /app\n'
'docker run -it --name new_container_name your_image_name /bin/bash\n'
'cd /app\n'
'ls -la\n'
'docker commit a22d2c38de1a new_image_name\n'
'docker run -it --name a22d2c38de1a new_image_name /bin/bash\n'
'cd /app\n'
'ls -la\n'
'docker commit new_container_name your_image_name_v2\n'
'docker run -it --name new_container_v2 your_image_name_v2 /bin/bash\n'
'cd /app\n'
'ls -la /app\n'
'docker run -it --name fresh_container your_image_name /bin/bash\n'
'cd /app\n'
'ls -la\n'
'docker build -t new_base_image_name .\n'
'docker run -it --name new_base_container new_base_image_name /bin/bash\n'
'cd /app\n'
'ls -la\n'
'docker build -t completely_new_image_name .\n'
'docker run -it --name completely_new_container completely_new_image_name /bin/bash\n'
'cd /app\n'
'ls -la\n'
'systemctl status docker\n'
'sudo systemctl restart docker\n'
'docker ps -a\n'
'journalctl -u docker.service --no-pager\n'
'sudo systemctl restart docker\n'
'free -m\n'
'sudo systemctl stop docker\n'
'sudo systemctl start docker\n'
'docker ps -a\n'
'sudo systemctl status docker\n'
'sudo reboot\n'
'docker ps -a\n'
'sudo systemctl status docker\n'
'top -b -n 1\n'
'sudo systemctl restart docker\n'
'docker info\n'
'df -h\n'
'sudo systemctl restart docker\n'
'ps aux | grep docker\n'
'sudo reboot\n'
'docker ps -a\n'
'free -m\n'
'sudo systemctl restart docker\n'
'docker info\n'
'sudo journalctl -u docker.service\n'
'top -b -n 1\n'
'sudo reboot\n'
'docker ps -a\n'
'sudo apt-get purge docker-ce docker-ce-cli containerd.io\n'
'sudo apt-get install docker-ce docker-ce-cli containerd.io\n'
'sudo systemctl start docker\n'
'sudo systemctl status docker\n'
'top -b -n 1\n'
'sudo apt-get purge docker-ce docker-ce-cli containerd.io\n'
'sudo apt-get install docker-ce docker-ce-cli containerd.io\n'
'sudo systemctl start docker\n'
'sudo systemctl status docker\n'
'sudo reboot\n'
'docker ps -a\n'
'sudo reboot\n'
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
