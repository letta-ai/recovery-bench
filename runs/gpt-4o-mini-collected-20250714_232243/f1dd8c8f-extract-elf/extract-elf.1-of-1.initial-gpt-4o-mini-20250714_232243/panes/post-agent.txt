root@a22d2c38de1a:/app# echo "const fs = require('fs');\nconst process = require('process');\n\nif (process.argv.length < 3) {\n    console.error('Usage: node e
xtract.js <file>');\n    process.exit(1);\n}\n\nconst file = process.argv[2];\n\nfs.readFile(file, (err, data) => {\n    if (err) {\n        console.error(err);
\n        return;\n    }\n    const memoryValues = {};\n    for (let i = 0; i < data.length; i += 4) {\n        const address = (i + 4194304).toString();\n
   const value = data.readUInt32LE(i);\n        memoryValues[address] = value;\n    }\n    console.log(JSON.stringify(memoryValues));\n});" > extract.js
root@a22d2c38de1a:/app# node extract.js /app/a.out > out.json; tmux wait -S done
/app/extract.js:1
const fs = require('fs');\nconst process = require('process');\n\nif (process.argv.length < 3) {\n    console.error('Usage: node extract.js <file>');\n    proce
ss.exit(1);\n}\n\nconst file = process.argv[2];\n\nfs.readFile(file, (err, data) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n
const memoryValues = {};\n    for (let i = 0; i < data.length; i += 4) {\n        const address = (i + 4194304).toString();\n        const value = data.readUInt
32LE(i);\n        memoryValues[address] = value;\n    }\n    console.log(JSON.stringify(memoryValues));\n});
                         ^

SyntaxError: Invalid or unexpected token
    at internalCompileFunction (node:internal/vm:73:18)
    at wrapSafe (node:internal/modules/cjs/loader:1274:20)
    at Module._compile (node:internal/modules/cjs/loader:1320:27)
    at Module._extensions..js (node:internal/modules/cjs/loader:1414:10)
    at Module.load (node:internal/modules/cjs/loader:1197:32)
    at Module._load (node:internal/modules/cjs/loader:1013:12)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:128:12)
    at node:internal/main/run_main_module:28:49

Node.js v18.19.1
root@a22d2c38de1a:/app# cat << 'EOF' > extract.js\nconst fs = require('fs');\nconst process = require('process');\n\nif (process.argv.length < 3) {\n    console
.error('Usage: node extract.js <file>');\n    process.exit(1);\n}\n\nconst file = process.argv[2];\n\nfs.readFile(file, (err, data) => {\n    if (err) {\n
  console.error(err);\n        return;\n    }\n    const memoryValues = {};\n    for (let i = 0; i < data.length; i += 4) {\n        const address = (i + 419430
4).toString();\n        const value = data.readUInt32LE(i);\n        memoryValues[address] = value;\n    }\n    console.log(JSON.stringify(memoryValues));\n});\
nEOF
> node extract.js /app/a.out > out.json; tmux wait -S done
> C-c
> node extract.js /app/a.out > out.json; tmux wait -S done
> cat extract.js; tmux wait -S done
> clear
> cat extract.js; tmux wait -S done
> nano extract.js
> node extract.js /app/a.out > out.json; tmux wait -S done
> rm extract.js
> cat << 'EOF' > extract.js\nconst fs = require('fs');\nconst process = require('process');\n\nif (process.argv.length < 3) {\n    console.error('Usage: node ex
tract.js <file>');\n    process.exit(1);\n}\n\nconst file = process.argv[2];\n\nfs.readFile(file, (err, data) => {\n    if (err) {\n        console.error(err);\
n        return;\n    }\n    const memoryValues = {};\n    for (let i = 0; i < data.length; i += 4) {\n        const address = (i + 4194304).toString();\n
  const value = data.readUInt32LE(i);\n        memoryValues[address] = value;\n    }\n    console.log(JSON.stringify(memoryValues));\n});\nEOF
> node extract.js /app/a.out > out.json; tmux wait -S done
> cat extract.js; tmux wait -S done
> rm extract.js
> cat > extract.js << 'EOF'\nconst fs = require('fs');\nconst process = require('process');\n\nif (process.argv.length < 3) {\n    console.error('Usage: node ex
tract.js <file>');\n    process.exit(1);\n}\n\nconst file = process.argv[2];\n\nfs.readFile(file, (err, data) => {\n    if (err) {\n        console.error(err);\
n        return;\n    }\n    const memoryValues = {};\n    for (let i = 0; i < data.length; i += 4) {\n        const address = (i + 4194304).toString();\n
  const value = data.readUInt32LE(i);\n        memoryValues[address] = value;\n    }\n    console.log(JSON.stringify(memoryValues));\n});\nEOF
> node extract.js /app/a.out > out.json; tmux wait -S done
> rm extract.js
> printf 'const fs = require(\'fs\');\nconst process = require(\'process\');\n\nif (process.argv.length < 3) {\n    console.error(\'Usage: node extract.js <file
>\');\n    process.exit(1);\n}\n\nconst file = process.argv[2];\n\nfs.readFile(file, (err, data) => {\n    if (err) {\n        console.error(err);\n        retu
rn;\n    }\n    const memoryValues = {};\n    for (let i = 0; i < data.length; i += 4) {\n        const address = (i + 4194304).toString();\n        const value
 = data.readUInt32LE(i);\n        memoryValues[address] = value;\n    }\n    console.log(JSON.stringify(memoryValues));\n});\n' > extract.js
> node extract.js /app/a.out > out.json; tmux wait -S done
> node -v; tmux wait -S done
> exit
> tmux new-session -s mysession
> cd /app
> printf 'const fs = require(\'fs\');\nconst process = require(\'process\');\n\nif (process.argv.length < 3) {\n    console.error(\'Usage: node extract.js <file
>\');\n    process.exit(1);\n}\n\nconst file = process.argv[2];\n\nfs.readFile(file, (err, data) => {\n    if (err) {\n        console.error(err);\n        retu
rn;\n    }\n    const memoryValues = {};\n    for (let i = 0; i < data.length; i += 4) {\n        const address = (i + 4194304).toString();\n        const value
 = data.readUInt32LE(i);\n        memoryValues[address] = value;\n    }\n    console.log(JSON.stringify(memoryValues));\n});\n' > extract.js
> node extract.js /app/a.out > out.json; tmux wait -S done
> ls -la /app/a.out; tmux wait -S done
> exit
> docker restart a22d2c38de1a
> docker exec -it a22d2c38de1a /bin/bash
> cd /app
> printf 'const fs = require(\'fs\');\nconst process = require(\'process\');\n\nif (process.argv.length < 3) {\n    console.error(\'Usage: node extract.js <file
>\');\n    process.exit(1);\n}\n\nconst file = process.argv[2];\n\nfs.readFile(file, (err, data) => {\n    if (err) {\n        console.error(err);\n        retu
rn;\n    }\n    const memoryValues = {};\n    for (let i = 0; i < data.length; i += 4) {\n        const address = (i + 4194304).toString();\n        const value
 = data.readUInt32LE(i);\n        memoryValues[address] = value;\n    }\n    console.log(JSON.stringify(memoryValues));\n});\n' > extract.js
> node extract.js /app/a.out > out.json; tmux wait -S done
> ls -la /app/a.out; tmux wait -S done
> docker stop a22d2c38de1a
> docker rm a22d2c38de1a
> docker run -it --name a22d2c38de1a your_image_name /bin/bash
> cd /app
> ls -la /app/a.out; tmux wait -S done
> ls -la /app; tmux wait -S done
> docker run -it --name new_container_name your_image_name /bin/bash
> cd /app
> ls -la; tmux wait -S done
> docker commit a22d2c38de1a new_image_name
> docker run -it --name a22d2c38de1a new_image_name /bin/bash
> cd /app
> ls -la; tmux wait -S done
> docker commit new_container_name your_image_name_v2
> docker run -it --name new_container_v2 your_image_name_v2 /bin/bash
> cd /app
> ls -la /app; tmux wait -S done
> docker run -it --name fresh_container your_image_name /bin/bash
> cd /app
> ls -la; tmux wait -S done
> docker build -t new_base_image_name .
> docker run -it --name new_base_container new_base_image_name /bin/bash
> cd /app
> ls -la; tmux wait -S done
> docker build -t completely_new_image_name .
> docker run -it --name completely_new_container completely_new_image_name /bin/bash
> cd /app
> ls -la; tmux wait -S done
> systemctl status docker; tmux wait -S done
> sudo systemctl restart docker
> docker ps -a; tmux wait -S done
> journalctl -u docker.service --no-pager; tmux wait -S done
> sudo systemctl restart docker
> free -m; tmux wait -S done
> sudo systemctl stop docker
> sudo systemctl start docker
> docker ps -a; tmux wait -S done
> sudo systemctl status docker; tmux wait -S done
> sudo reboot
> docker ps -a; tmux wait -S done
> sudo systemctl status docker; tmux wait -S done
> top -b -n 1; tmux wait -S done
> sudo systemctl restart docker
> docker info; tmux wait -S done
> df -h; tmux wait -S done
> sudo systemctl restart docker
> ps aux | grep docker; tmux wait -S done
> sudo reboot
> docker ps -a; tmux wait -S done
> free -m; tmux wait -S done
> sudo systemctl restart docker
> docker info; tmux wait -S done
> sudo journalctl -u docker.service; tmux wait -S done
> top -b -n 1; tmux wait -S done
> sudo reboot
> docker ps -a; tmux wait -S done
> sudo apt-get purge docker-ce docker-ce-cli containerd.io
> sudo apt-get install docker-ce docker-ce-cli containerd.io
> sudo systemctl start docker
> sudo systemctl status docker; tmux wait -S done
> top -b -n 1; tmux wait -S done
> sudo apt-get purge docker-ce docker-ce-cli containerd.io
> sudo apt-get install docker-ce docker-ce-cli containerd.io
> sudo systemctl start docker
> sudo systemctl status docker; tmux wait -S done
> sudo reboot
> docker ps -a; tmux wait -S done
> sudo reboot
>
