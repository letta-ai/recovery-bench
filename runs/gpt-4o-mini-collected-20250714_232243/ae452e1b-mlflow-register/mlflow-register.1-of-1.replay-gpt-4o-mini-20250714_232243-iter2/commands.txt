['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
'mlflow server --host 0.0.0.0 --port 8080 &\n'
'python -c "import mlflow; import mlflow.sklearn; from sklearn.linear_model import LinearRegression; from sklearn.datasets import make_random; import pandas as pd; X, y = make_random(n_samples=100, n_features=3, random_state=0); model = LinearRegression(); model.fit(X, y); mlflow.sklearn.log_model(model, \'gpt-5\')"\n'
'python -c "import mlflow; import mlflow.sklearn; from sklearn.linear_model import LinearRegression; from sklearn.datasets import make_regression; import pandas as pd; X, y = make_regression(n_samples=100, n_features=3, random_state=0); model = LinearRegression(); model.fit(X, y); mlflow.sklearn.log_model(model, \'gpt-5\')"\n'
'python -c "import mlflow; mlflow.set_tracking_uri(\'http://localhost:8080\'); import mlflow.sklearn; from sklearn.linear_model import LinearRegression; from sklearn.datasets import make_regression; import pandas as pd; X, y = make_regression(n_samples=100, n_features=3, random_state=0); model = LinearRegression(); model.fit(X, y); mlflow.sklearn.log_model(model, \'gpt-5\')"\n'
'export GIT_PYTHON_GIT_EXECUTABLE=$(which git)\n'
'python -c "import mlflow; mlflow.set_tracking_uri(\'http://localhost:8080\'); import mlflow.sklearn; from sklearn.linear_model import LinearRegression; from sklearn.datasets import make_regression; import pandas as pd; X, y = make_regression(n_samples=100, n_features=3, random_state=0); model = LinearRegression(); model.fit(X, y); mlflow.sklearn.log_model(model, \'gpt-5\', input_example=X[:5].tolist())"\n'
'export GIT_PYTHON_GIT_EXECUTABLE=$(which git)\n'
'python -c "import mlflow; mlflow.set_tracking_uri(\'http://localhost:8080\'); import mlflow.sklearn; from sklearn.linear_model import LinearRegression; from sklearn.datasets import make_regression; import pandas as pd; X, y = make_regression(n_samples=100, n_features=3, random_state=0); model = LinearRegression(); model.fit(X, y); mlflow.sklearn.log_model(model, \'gpt-5\', input_example=[{\'feature1\': float(x[0]), \'feature2\': float(x[1]), \'feature3\': float(x[2])} for x in X[:5]])"\n'
'export GIT_PYTHON_GIT_EXECUTABLE=$(which git)\n'
'python -c "import mlflow; mlflow.set_tracking_uri(\'http://localhost:8080\'); import mlflow.sklearn; from sklearn.linear_model import LinearRegression; from sklearn.datasets import make_regression; import pandas as pd; X, y = make_regression(n_samples=100, n_features=3, random_state=0); df = pd.DataFrame(X, columns=[\'feature1\', \'feature2\', \'feature3\']); model = LinearRegression(); model.fit(df, y); mlflow.sklearn.log_model(model, \'gpt-5\', input_example=df.iloc[:5].to_dict(orient=\'records\'))"\n'
'export GIT_PYTHON_GIT_EXECUTABLE=$(which git)\n'
'python -c "import mlflow; mlflow.set_tracking_uri(\'http://localhost:8080\'); import mlflow.sklearn; from sklearn.linear_model import LinearRegression; from sklearn.datasets import make_regression; import pandas as pd; X, y = make_regression(n_samples=100, n_features=3, random_state=0); df = pd.DataFrame(X, columns=[\'feature1\', \'feature2\', \'feature3\']); model = LinearRegression(); model.fit(df[[\'feature1\', \'feature2\', \'feature3\']], y); mlflow.sklearn.log_model(model, \'gpt-5\', input_example=df.iloc[:5].to_dict(orient=\'records\'))"\n'
'export GIT_PYTHON_REFRESH=quiet\n'
'which git\n'
'apt-get update\n'
'apt-get install git -y\n'
'git --version\n'
'python -c "import mlflow; mlflow.set_tracking_uri(\'http://localhost:8080\'); import mlflow.sklearn; from sklearn.linear_model import LinearRegression; from sklearn.datasets import make_regression; import pandas as pd; X, y = make_regression(n_samples=100, n_features=3, random_state=0); df = pd.DataFrame(X, columns=[\'feature1\', \'feature2\', \'feature3\']); model = LinearRegression(); model.fit(df[[\'feature1\', \'feature2\', \'feature3\']], y); mlflow.sklearn.log_model(model, \'gpt-5\', input_example=df.iloc[:5].to_dict(orient=\'records\'))"\n'
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
