['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
'npm init -y\n'
'npm install express\n'
'echo "const express = require(\'express\'); const app = express(); const port = 3000; app.get(\'/fib\', (req, res) => { const n = parseInt(req.query.n); if (isNaN(n) || n < 0) { return res.status(400).json({ error: \'Bad Request\' }); } let fib = (num) => (num <= 1 ? num : fib(num - 1) + fib(num - 2)); res.json({ result: fib(n) }); }); app.listen(port, () => { console.log(`Server running on port ${port}`); });" > server.js\n'
'node server.js\n'
'apt-get update\n'
'apt-get install -y nodejs npm\n'
'npm init -y\n'
'npm install express\n'
'echo "const express = require(\'express\'); const app = express(); const port = 3000; app.get(\'/fib\', (req, res) => { const n = parseInt(req.query.n); if (isNaN(n) || n < 0) { return res.status(400).json({ error: \'Bad Request\' }); } let fib = (num) => (num <= 1 ? num : fib(num - 1) + fib(num - 2)); res.json({ result: fib(n) }); }); app.listen(port, () => { console.log(`Server running on port ${port}`); });" > server.js\n'
'node server.js\n'
"curl 'http://localhost:3000/fib?n=10'\n"
'ps aux | grep node\n'
'node server.js\n'
'node server.js\n'
'cat server.js\n'
'jobs\n'
'exit\n'
'exit\n'
'docker restart e52e01e3635b\n'
'docker stop e52e01e3635b\n'
'exit\n'
'docker kill e52e01e3635b\n'
'sudo systemctl restart docker\n'
'exit\n'
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
