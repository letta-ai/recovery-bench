root@8130e9ff7179:/app# bash /tests/run-tests.sh; tmux wait -S done
Hit:1 http://deb.debian.org/debian bookworm InRelease
Hit:2 http://deb.debian.org/debian bookworm-updates InRelease
Hit:3 http://deb.debian.org/debian-security bookworm-security InRelease
Reading package lists... Done
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following additional packages will be installed:
  libbrotli1 libcurl4 libldap-2.5-0 libldap-common libnghttp2-14 libpsl5 librtmp1 libsasl2-2 libsasl2-modules libsasl2-modules-db libssh2-1 publicsuffix
Suggested packages:
  libsasl2-modules-gssapi-mit | libsasl2-modules-gssapi-heimdal libsasl2-modules-ldap libsasl2-modules-otp libsasl2-modules-sql
The following NEW packages will be installed:
  curl libbrotli1 libcurl4 libldap-2.5-0 libldap-common libnghttp2-14 libpsl5 librtmp1 libsasl2-2 libsasl2-modules libsasl2-modules-db libssh2-1 publicsuffix
0 upgraded, 13 newly installed, 0 to remove and 30 not upgraded.
Need to get 1839 kB of archives.
After this operation, 4550 kB of additional disk space will be used.
Get:1 http://deb.debian.org/debian bookworm/main amd64 libbrotli1 amd64 1.0.9-2+b6 [275 kB]
Get:2 http://deb.debian.org/debian bookworm/main amd64 libsasl2-modules-db amd64 2.1.28+dfsg-10 [20.3 kB]
Get:3 http://deb.debian.org/debian bookworm/main amd64 libsasl2-2 amd64 2.1.28+dfsg-10 [59.7 kB]
Get:4 http://deb.debian.org/debian bookworm/main amd64 libldap-2.5-0 amd64 2.5.13+dfsg-5 [183 kB]
Get:5 http://deb.debian.org/debian bookworm/main amd64 libnghttp2-14 amd64 1.52.0-1+deb12u2 [73.0 kB]
Get:6 http://deb.debian.org/debian bookworm/main amd64 libpsl5 amd64 0.21.2-1 [58.7 kB]
Get:7 http://deb.debian.org/debian bookworm/main amd64 librtmp1 amd64 2.4+20151223.gitfa8646d.1-2+b2 [60.8 kB]
Get:8 http://deb.debian.org/debian bookworm/main amd64 libssh2-1 amd64 1.10.0-3+b1 [179 kB]
Get:9 http://deb.debian.org/debian bookworm/main amd64 libcurl4 amd64 7.88.1-10+deb12u12 [391 kB]
Get:10 http://deb.debian.org/debian bookworm/main amd64 curl amd64 7.88.1-10+deb12u12 [315 kB]
Get:11 http://deb.debian.org/debian bookworm/main amd64 libldap-common all 2.5.13+dfsg-5 [29.3 kB]
Get:12 http://deb.debian.org/debian bookworm/main amd64 libsasl2-modules amd64 2.1.28+dfsg-10 [66.6 kB]
Get:13 http://deb.debian.org/debian bookworm/main amd64 publicsuffix all 20230209.2326-1 [126 kB]
Fetched 1839 kB in 0s (16.8 MB/s)
debconf: delaying package configuration, since apt-utils is not installed
Selecting previously unselected package libbrotli1:amd64.
(Reading database ... 7702 files and directories currently installed.)
Preparing to unpack .../00-libbrotli1_1.0.9-2+b6_amd64.deb ...
Unpacking libbrotli1:amd64 (1.0.9-2+b6) ...
Selecting previously unselected package libsasl2-modules-db:amd64.
Preparing to unpack .../01-libsasl2-modules-db_2.1.28+dfsg-10_amd64.deb ...
Unpacking libsasl2-modules-db:amd64 (2.1.28+dfsg-10) ...
Selecting previously unselected package libsasl2-2:amd64.
Preparing to unpack .../02-libsasl2-2_2.1.28+dfsg-10_amd64.deb ...
Unpacking libsasl2-2:amd64 (2.1.28+dfsg-10) ...
Selecting previously unselected package libldap-2.5-0:amd64.
Preparing to unpack .../03-libldap-2.5-0_2.5.13+dfsg-5_amd64.deb ...
Unpacking libldap-2.5-0:amd64 (2.5.13+dfsg-5) ...
Selecting previously unselected package libnghttp2-14:amd64.
Preparing to unpack .../04-libnghttp2-14_1.52.0-1+deb12u2_amd64.deb ...
Unpacking libnghttp2-14:amd64 (1.52.0-1+deb12u2) ...
Selecting previously unselected package libpsl5:amd64.
Preparing to unpack .../05-libpsl5_0.21.2-1_amd64.deb ...
Unpacking libpsl5:amd64 (0.21.2-1) ...
Selecting previously unselected package librtmp1:amd64.
Preparing to unpack .../06-librtmp1_2.4+20151223.gitfa8646d.1-2+b2_amd64.deb ...
Unpacking librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2+b2) ...
Selecting previously unselected package libssh2-1:amd64.
Preparing to unpack .../07-libssh2-1_1.10.0-3+b1_amd64.deb ...
Unpacking libssh2-1:amd64 (1.10.0-3+b1) ...
Selecting previously unselected package libcurl4:amd64.
Preparing to unpack .../08-libcurl4_7.88.1-10+deb12u12_amd64.deb ...
Unpacking libcurl4:amd64 (7.88.1-10+deb12u12) ...
Selecting previously unselected package curl.
Preparing to unpack .../09-curl_7.88.1-10+deb12u12_amd64.deb ...
Unpacking curl (7.88.1-10+deb12u12) ...
Selecting previously unselected package libldap-common.
Preparing to unpack .../10-libldap-common_2.5.13+dfsg-5_all.deb ...
Unpacking libldap-common (2.5.13+dfsg-5) ...
Selecting previously unselected package libsasl2-modules:amd64.
Preparing to unpack .../11-libsasl2-modules_2.1.28+dfsg-10_amd64.deb ...
Unpacking libsasl2-modules:amd64 (2.1.28+dfsg-10) ...
Selecting previously unselected package publicsuffix.
Preparing to unpack .../12-publicsuffix_20230209.2326-1_all.deb ...
Unpacking publicsuffix (20230209.2326-1) ...
Setting up libpsl5:amd64 (0.21.2-1) ...
Setting up libbrotli1:amd64 (1.0.9-2+b6) ...
Setting up libsasl2-modules:amd64 (2.1.28+dfsg-10) ...
Setting up libnghttp2-14:amd64 (1.52.0-1+deb12u2) ...
Setting up libldap-common (2.5.13+dfsg-5) ...
Setting up libsasl2-modules-db:amd64 (2.1.28+dfsg-10) ...
Setting up librtmp1:amd64 (2.4+20151223.gitfa8646d.1-2+b2) ...
Setting up libsasl2-2:amd64 (2.1.28+dfsg-10) ...
Setting up libssh2-1:amd64 (1.10.0-3+b1) ...
Setting up publicsuffix (20230209.2326-1) ...
Setting up libldap-2.5-0:amd64 (2.5.13+dfsg-5) ...
Setting up libcurl4:amd64 (7.88.1-10+deb12u12) ...
Setting up curl (7.88.1-10+deb12u12) ...
Processing triggers for libc-bin (2.36-9+deb12u9) ...
downloading uv 0.7.13 x86_64-unknown-linux-gnu
no checksums to verify
installing to /root/.local/bin
  uv
  uvx
everything's installed!

To add $HOME/.local/bin to your PATH, either restart your shell or run:

    source $HOME/.local/bin/env (sh, bash, zsh)
    source $HOME/.local/bin/env.fish (fish)
Initialized project `app`
Using CPython 3.13.1 interpreter at: /usr/local/bin/python3.13
Creating virtual environment at: .venv
Resolved 7 packages in 139ms
Prepared 5 packages in 151ms
Installed 5 packages in 63ms
 + iniconfig==2.1.0
 + packaging==25.0
 + pluggy==1.6.0
 + pygments==2.19.2
 + pytest==8.4.1
Resolved 32 packages in 408ms
Prepared 25 packages in 29.70s
Installed 25 packages in 407ms
 + filelock==3.18.0
 + fsspec==2025.5.1
 + jinja2==3.1.6
 + markupsafe==3.0.2
 + mpmath==1.3.0
 + networkx==3.5
 + nvidia-cublas-cu12==12.6.4.1
 + nvidia-cuda-cupti-cu12==12.6.80
 + nvidia-cuda-nvrtc-cu12==12.6.77
 + nvidia-cuda-runtime-cu12==12.6.77
 + nvidia-cudnn-cu12==9.5.1.17
 + nvidia-cufft-cu12==11.3.0.4
 + nvidia-cufile-cu12==1.11.1.6
 + nvidia-curand-cu12==10.3.7.77
 + nvidia-cusolver-cu12==11.7.1.2
 + nvidia-cusparse-cu12==12.5.4.2
 + nvidia-cusparselt-cu12==0.6.3
 + nvidia-nccl-cu12==2.26.2
 + nvidia-nvjitlink-cu12==12.6.85
 + nvidia-nvtx-cu12==12.6.77
 + setuptools==80.9.0
 + sympy==1.14.0
 + torch==2.7.1
 + triton==3.3.1
 + typing-extensions==4.14.1
===================================================================== test session starts ======================================================================
platform linux -- Python 3.13.1, pytest-8.4.1, pluggy-1.6.0
rootdir: /tests
collected 5 items

../tests/test_outputs.py .FFFF                                                                                                                           [100%]

=========================================================================== FAILURES ===========================================================================
____________________________________________________________________ test_model_file_exists ____________________________________________________________________

    def test_model_file_exists():
        """Checks if the model file exists"""
        # Reference the directory the agent operated in (the WORKDIR in the Docker env)
        hello_path = Path("/app/model.pt")

>       assert hello_path.exists(), f"File {hello_path} does not exist"
E       AssertionError: File /app/model.pt does not exist
E       assert False
E        +  where False = exists()
E        +    where exists = PosixPath('/app/model.pt').exists

/tests/test_outputs.py:87: AssertionError
___________________________________________________________________ test_model_loads_weights ___________________________________________________________________

    def test_model_loads_weights():
        """Checks if the model can loads the original weights without any errors"""
        # Reference the directory the agent operated in (the WORKDIR in the Docker env)
>       model = torch.jit.load("/app/model.pt")
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/tests/test_outputs.py:92:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

f = '/app/model.pt', map_location = None, _extra_files = None, _restore_shapes = False

    def load(f, map_location=None, _extra_files=None, _restore_shapes=False):
        r"""
        Load a :class:`ScriptModule` or :class:`ScriptFunction` previously saved with :func:`torch.jit.save <torch.jit.save>`.

        All previously saved modules, no matter their device, are first loaded onto CPU,
        and then are moved to the devices they were saved from. If this fails (e.g.
        because the run time system doesn't have certain devices), an exception is
        raised.

        Args:
            f: a file-like object (has to implement read, readline, tell, and seek),
                or a string containing a file name
            map_location (string or torch.device): A simplified version of
                ``map_location`` in `torch.jit.save` used to dynamically remap
                storages to an alternative set of devices.
            _extra_files (dictionary of filename to content): The extra
                filenames given in the map would be loaded and their content
                would be stored in the provided map.
            _restore_shapes (bool): Whether or not to retrace the module on load using stored inputs

        Returns:
            A :class:`ScriptModule` object.

        .. warning::
            It is possible to construct malicious pickle data which will execute arbitrary code
            during func:`torch.jit.load`. Never load data that could have come from an untrusted
            source, or that could have been tampered with. **Only load data you trust**.

        Example:
        .. testcode::

            import torch
            import io

            torch.jit.load('scriptmodule.pt')

            # Load ScriptModule from io.BytesIO object
            with open('scriptmodule.pt', 'rb') as f:
                buffer = io.BytesIO(f.read())

            # Load all tensors to the original device
            torch.jit.load(buffer)

            # Load all tensors onto CPU, using a device
            buffer.seek(0)
            torch.jit.load(buffer, map_location=torch.device('cpu'))

            # Load all tensors onto CPU, using a string
            buffer.seek(0)
            torch.jit.load(buffer, map_location='cpu')

            # Load with extra files.
            extra_files = {'foo.txt': ''}  # values will be replaced with data
            torch.jit.load('scriptmodule.pt', _extra_files=extra_files)
            print(extra_files['foo.txt'])

        .. testoutput::
            :hide:

            ...

        .. testcleanup::

            import os
            os.remove("scriptmodule.pt")
        """
        if isinstance(f, (str, os.PathLike)):
            if not os.path.exists(f):
>               raise ValueError(f"The provided filename {f} does not exist")
E               ValueError: The provided filename /app/model.pt does not exist

.venv/lib/python3.13/site-packages/torch/jit/_serialization.py:158: ValueError
____________________________________________________________________ test_state_dicts_match ____________________________________________________________________

    def test_state_dicts_match():
        """Checks to see if the state dicts of the recovered model match exactly with the
        original weights, except for the output layer"""
        # Reference the directory the agent operated in (the WORKDIR in the Docker env)
>       agent_state_dict = torch.jit.load("/app/model.pt").state_dict()
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/tests/test_outputs.py:100:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

f = '/app/model.pt', map_location = None, _extra_files = None, _restore_shapes = False

    def load(f, map_location=None, _extra_files=None, _restore_shapes=False):
        r"""
        Load a :class:`ScriptModule` or :class:`ScriptFunction` previously saved with :func:`torch.jit.save <torch.jit.save>`.

        All previously saved modules, no matter their device, are first loaded onto CPU,
        and then are moved to the devices they were saved from. If this fails (e.g.
        because the run time system doesn't have certain devices), an exception is
        raised.

        Args:
            f: a file-like object (has to implement read, readline, tell, and seek),
                or a string containing a file name
            map_location (string or torch.device): A simplified version of
                ``map_location`` in `torch.jit.save` used to dynamically remap
                storages to an alternative set of devices.
            _extra_files (dictionary of filename to content): The extra
                filenames given in the map would be loaded and their content
                would be stored in the provided map.
            _restore_shapes (bool): Whether or not to retrace the module on load using stored inputs

        Returns:
            A :class:`ScriptModule` object.

        .. warning::
            It is possible to construct malicious pickle data which will execute arbitrary code
            during func:`torch.jit.load`. Never load data that could have come from an untrusted
            source, or that could have been tampered with. **Only load data you trust**.

        Example:
        .. testcode::

            import torch
            import io

            torch.jit.load('scriptmodule.pt')

            # Load ScriptModule from io.BytesIO object
            with open('scriptmodule.pt', 'rb') as f:
                buffer = io.BytesIO(f.read())

            # Load all tensors to the original device
            torch.jit.load(buffer)

            # Load all tensors onto CPU, using a device
            buffer.seek(0)
            torch.jit.load(buffer, map_location=torch.device('cpu'))

            # Load all tensors onto CPU, using a string
            buffer.seek(0)
            torch.jit.load(buffer, map_location='cpu')

            # Load with extra files.
            extra_files = {'foo.txt': ''}  # values will be replaced with data
            torch.jit.load('scriptmodule.pt', _extra_files=extra_files)
            print(extra_files['foo.txt'])

        .. testoutput::
            :hide:

            ...

        .. testcleanup::

            import os
            os.remove("scriptmodule.pt")
        """
        if isinstance(f, (str, os.PathLike)):
            if not os.path.exists(f):
>               raise ValueError(f"The provided filename {f} does not exist")
E               ValueError: The provided filename /app/model.pt does not exist

.venv/lib/python3.13/site-packages/torch/jit/_serialization.py:158: ValueError
_______________________________________________________________________ test_model_loss ________________________________________________________________________

    def test_model_loss():
        """Checks to see if the loss of the recovered model is lower than
        the original model"""
        true_model = RecoveredModel(
            input_dim=64,
            d_model=128,
            nhead=4,
            num_encoder_layers=3,
            num_decoder_layers=1,
            dim_feedforward=256,
            dropout=0.0
        )
        true_model.load_state_dict(torch.load('/app/weights.pt'))

>       agent_model = torch.jit.load('/app/model.pt')
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/tests/test_outputs.py:127:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

f = '/app/model.pt', map_location = None, _extra_files = None, _restore_shapes = False

    def load(f, map_location=None, _extra_files=None, _restore_shapes=False):
        r"""
        Load a :class:`ScriptModule` or :class:`ScriptFunction` previously saved with :func:`torch.jit.save <torch.jit.save>`.

        All previously saved modules, no matter their device, are first loaded onto CPU,
        and then are moved to the devices they were saved from. If this fails (e.g.
        because the run time system doesn't have certain devices), an exception is
        raised.

        Args:
            f: a file-like object (has to implement read, readline, tell, and seek),
                or a string containing a file name
            map_location (string or torch.device): A simplified version of
                ``map_location`` in `torch.jit.save` used to dynamically remap
                storages to an alternative set of devices.
            _extra_files (dictionary of filename to content): The extra
                filenames given in the map would be loaded and their content
                would be stored in the provided map.
            _restore_shapes (bool): Whether or not to retrace the module on load using stored inputs

        Returns:
            A :class:`ScriptModule` object.

        .. warning::
            It is possible to construct malicious pickle data which will execute arbitrary code
            during func:`torch.jit.load`. Never load data that could have come from an untrusted
            source, or that could have been tampered with. **Only load data you trust**.

        Example:
        .. testcode::

            import torch
            import io

            torch.jit.load('scriptmodule.pt')

            # Load ScriptModule from io.BytesIO object
            with open('scriptmodule.pt', 'rb') as f:
                buffer = io.BytesIO(f.read())

            # Load all tensors to the original device
            torch.jit.load(buffer)

            # Load all tensors onto CPU, using a device
            buffer.seek(0)
            torch.jit.load(buffer, map_location=torch.device('cpu'))

            # Load all tensors onto CPU, using a string
            buffer.seek(0)
            torch.jit.load(buffer, map_location='cpu')

            # Load with extra files.
            extra_files = {'foo.txt': ''}  # values will be replaced with data
            torch.jit.load('scriptmodule.pt', _extra_files=extra_files)
            print(extra_files['foo.txt'])

        .. testoutput::
            :hide:

            ...

        .. testcleanup::

            import os
            os.remove("scriptmodule.pt")
        """
        if isinstance(f, (str, os.PathLike)):
            if not os.path.exists(f):
>               raise ValueError(f"The provided filename {f} does not exist")
E               ValueError: The provided filename /app/model.pt does not exist

.venv/lib/python3.13/site-packages/torch/jit/_serialization.py:158: ValueError
======================================================================= warnings summary =======================================================================
.venv/lib/python3.13/site-packages/torch/_subclasses/functional_tensor.py:276
  /app/.venv/lib/python3.13/site-packages/torch/_subclasses/functional_tensor.py:276: UserWarning: Failed to initialize NumPy: No module named 'numpy' (Triggere
d internally at /pytorch/torch/csrc/utils/tensor_numpy.cpp:81.)
    cpu = _conversion_method_template(device=torch.device("cpu"))

test_outputs.py::test_model_loss
  /app/.venv/lib/python3.13/site-packages/torch/nn/modules/transformer.py:382: UserWarning: enable_nested_tensor is True, but self.use_nested_tensor is False be
cause encoder_layer.self_attn.batch_first was not True(use batch_first for better inference performance)
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
============================================================================ PASSES ============================================================================
=================================================================== short test summary info ====================================================================
PASSED ../tests/test_outputs.py::test_weights_file_unchanged
FAILED ../tests/test_outputs.py::test_model_file_exists - AssertionError: File /app/model.pt does not exist
FAILED ../tests/test_outputs.py::test_model_loads_weights - ValueError: The provided filename /app/model.pt does not exist
FAILED ../tests/test_outputs.py::test_state_dicts_match - ValueError: The provided filename /app/model.pt does not exist
FAILED ../tests/test_outputs.py::test_model_loss - ValueError: The provided filename /app/model.pt does not exist
=========================================================== 4 failed, 1 passed, 2 warnings in 4.11s ============================================================
root@8130e9ff7179:/app#
