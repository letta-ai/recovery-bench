['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
'pip install grpcio==1.73.0 grpcio-tools==1.73.0\n'
'echo \'syntax = "proto3";\\n\\nservice KVStore {\\n    rpc GetVal(GetValRequest) returns (GetValResponse);\\n    rpc SetVal(SetValRequest) returns (SetValResponse);\\n}\\n\\nmessage GetValRequest {\\n    string key = 1;\\n}\\n\\nmessage GetValResponse {\\n    int value = 1;\\n}\\n\\nmessage SetValRequest {\\n    string key = 1;\\n    int value = 2;\\n}\\n\\nmessage SetValResponse {\\n    int value = 1;\\n}\' > kv-store.proto\n'
'python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. kv-store.proto\n'
"echo 'import grpc\\nfrom concurrent import futures\\nimport kv_store_pb2\\nimport kv_store_pb2_grpc\\n\\nclass Server(kv_store_pb2_grpc.KVStoreServicer):\\n    def __init__(self):\\n        self.store = {}\\n\\n    def GetVal(self, request, context):\\n        return kv_store_pb2.GetValResponse(value=self.store.get(request.key, 0))\\n\\n    def SetVal(self, request, context):\\n        self.store[request.key] = request.value\\n        return kv_store_pb2.SetValResponse(value=request.value)\\n\\ndef serve():\\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\\n    kv_store_pb2_grpc.add_KVStoreServicer_to_server(Server(), server)\\n    server.add_insecure_port('[::]:5328')\\n    server.start()\\n    server.wait_for_termination()\\n\\nif __name__ == '__main__':\\n    serve()' > server.py\n"
'python server.py\n'
'echo \'syntax = "proto3";\\n\\nservice KVStore {\\n    rpc GetVal(GetValRequest) returns (GetValResponse);\\n    rpc SetVal(SetValRequest) returns (SetValResponse);\\n}\\n\\nmessage GetValRequest {\\n    string key = 1;\\n}\\n\\nmessage GetValResponse {\\n    int value = 1;\\n}\\n\\nmessage SetValRequest {\\n    string key = 1;\\n    int value = 2;\\n}\\n\\nmessage SetValResponse {\\n    int value = 1;\\n}\' > kv-store.proto\n'
'python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. kv-store.proto\n'
"echo 'import grpc\\nfrom concurrent import futures\\nimport kv_store_pb2\\nimport kv_store_pb2_grpc\\n\\nclass Server(kv_store_pb2_grpc.KVStoreServicer):\\n    def __init__(self):\\n        self.store = {}\\n\\n    def GetVal(self, request, context):\\n        return kv_store_pb2.GetValResponse(value=self.store.get(request.key, 0))\\n\\n    def SetVal(self, request, context):\\n        self.store[request.key] = request.value\\n        return kv_store_pb2.SetValResponse(value=request.value)\\n\\ndef serve():\\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\\n    kv_store_pb2_grpc.add_KVStoreServicer_to_server(Server(), server)\\n    server.add_insecure_port('[::]:5328')\\n    server.start()\\n    server.wait_for_termination()\\n\\nif __name__ == '__main__':\\n    serve()' > server.py\n"
'python server.py\n'
"echo 'import grpc\\nfrom concurrent import futures\\nimport kv_store_pb2\\nimport kv_store_pb2_grpc\\n\\nclass Server(kv_store_pb2_grpc.KVStoreServicer):\\n    def __init__(self):\\n        self.store = {}\\n\\n    def GetVal(self, request, context):\\n        return kv_store_pb2.GetValResponse(value=self.store.get(request.key, 0))\\n\\n    def SetVal(self, request, context):\\n        self.store[request.key] = request.value\\n        return kv_store_pb2.SetValResponse(value=request.value)\\n\\ndef serve():\\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\\n    kv_store_pb2_grpc.add_KVStoreServicer_to_server(Server(), server)\\n    server.add_insecure_port('[::]:5328')\\n    server.start()\\n    server.wait_for_termination()\\n\\nif __name__ == '__main__':\\n    serve()' > server.py\n"
'python server.py\n'
'echo \'syntax = "proto3";\\n\\nservice KVStore {\\n    rpc GetVal(GetValRequest) returns (GetValResponse);\\n    rpc SetVal(SetValRequest) returns (SetValResponse);\\n}\\n\\nmessage GetValRequest {\\n    string key = 1;\\n}\\n\\nmessage GetValResponse {\\n    int value = 1;\\n}\\n\\nmessage SetValRequest {\\n    string key = 1;\\n    int value = 2;\\n}\\n\\nmessage SetValResponse {\\n    int value = 1;\\n}\' > kv-store.proto\n'
'python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. kv-store.proto\n'
"echo 'import grpc\\nfrom concurrent import futures\\nimport kv_store_pb2\\nimport kv_store_pb2_grpc\\n\\nclass Server(kv_store_pb2_grpc.KVStoreServicer):\\n    def __init__(self):\\n        self.store = {}\\n\\n    def GetVal(self, request, context):\\n        return kv_store_pb2.GetValResponse(value=self.store.get(request.key, 0))\\n\\n    def SetVal(self, request, context):\\n        self.store[request.key] = request.value\\n        return kv_store_pb2.SetValResponse(value=request.value)\\n\\ndef serve():\\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\\n    kv_store_pb2_grpc.add_KVStoreServicer_to_server(Server(), server)\\n    server.add_insecure_port('[::]:5328')\\n    server.start()\\n    server.wait_for_termination()\\n\\nif __name__ == '__main__':\\n    serve()' > server.py\n"
'python server.py\n'
'cat <<EOF > kv-store.proto\\nsyntax = "proto3";\\n\\nservice KVStore {\\n    rpc GetVal(GetValRequest) returns (GetValResponse);\\n    rpc SetVal(SetValRequest) returns (SetValResponse);\\n}\\n\\nmessage GetValRequest {\\n    string key = 1;\\n}\\n\\nmessage GetValResponse {\\n    int value = 1;\\n}\\n\\nmessage SetValRequest {\\n    string key = 1;\\n    int value = 2;\\n}\\n\\nmessage SetValResponse {\\n    int value = 1;\\n}\\nEOF\n'
'python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. kv-store.proto\n'
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
