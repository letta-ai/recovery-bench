['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
'echo \'fn main() { let n: usize = std::env::args().nth(1).unwrap().parse().unwrap(); println!("{}", fibonacci(n)); } fn fibonacci(n: usize) -> u64 { if n == 0 { 1 } else if n == 1 { 1 } else { fibonacci(n - 1) + fibonacci(n - 2) } }\' > /app/main.rs\n'
'cat /app/main.rs\n'
'rustc /app/main.rs && ./main 5\n'
'g++ -x c++ /app/main.rs -o cmain && ./cmain 5\n'
'echo \'fn main() { let n: usize = std::env::args().nth(1).unwrap().parse().unwrap(); println!("{}", fibonacci(n)); } fn fibonacci(n: usize) -> u64 { if n == 0 { 1 } else if n == 1 { 1 } else { fibonacci(n - 1) + fibonacci(n - 2) } }\n\nextern "C" { void cpp_main(int n); }\n\n#[no_mangle]\npub extern "C" fn rust_main(n: i32) { println!("{}", fibonacci(n as usize)); }\n\nint main(int argc, char* argv[]) { int n = atoi(argv[1]); cpp_main(n); return 0; }\n\nvoid cpp_main(int n) { printf("%d\\n", fibonacci(n)); }\n\' > /app/main.rs\n'
'echo \'#include <stdio.h>\nextern "C" { \n    void cpp_main(int n); \n}\n\nfn main() { \n    let n: usize = std::env::args().nth(1).unwrap().parse().unwrap(); \n    println!("{}", fibonacci(n)); \n}\n\nfn fibonacci(n: usize) -> u64 { \n    if n == 0 { 1 } \n    else if n == 1 { 1 } \n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn rust_main(n: i32) { \n    println!("{}", fibonacci(n as usize)); \n}\n\nint main(int argc, char* argv[]) { \n    int n = atoi(argv[1]); \n    cpp_main(n); \n    return 0; \n}\n\nvoid cpp_main(int n) { \n    printf("%d\\n", fibonacci(n)); \n}\' > /app/main.rs\n'
'cat /app/main.rs\n'
'rustc /app/main.rs && ./main 5\n'
'g++ -x c++ /app/main.rs -o cmain && ./cmain 5\n'
'echo \'#include <stdio.h>\nextern "C" {\n    void cpp_main(int n);\n}\n\nextern "C" fn rust_main(n: i32);\n\nint main(int argc, char* argv[]) {\n    int n = atoi(argv[1]);\n    cpp_main(n);\n    return 0;\n}\n\nvoid cpp_main(int n) {\n    printf("%d\\n", fibonacci(n));\n}\n\nfn main() {\n    let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();\n    println!("{}", fibonacci(n));\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn rust_main(n: i32) {\n    println!("{}", fibonacci(n as usize));\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn main() {\n    let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();\n    println!("{}", fibonacci(n));\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn rust_main(n: i32) {\n    println!("{}", fibonacci(n as usize));\n}\n\nfn main() {\n    let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();\n    println!("{}", fibonacci(n));\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn rust_main(n: i32) {\n    println!("{}", fibonacci(n as usize));\n}\n\nfn main() {\n    let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();\n    println!("{}", fibonacci(n));\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn rust_main(n: i32) {\n    println!("{}", fibonacci(n as usize));\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn main() {\n    let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();\n    println!("{}", fibonacci(n));\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn main() {\n    let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();\n    println!("{}", fibonacci(n));\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\n\nfn main() {\n    let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();\n    println!("{}", fibonacci(n));\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { return 1; }\n    else if n == 1 { return 1; }\n    else { return fibonacci(n - 1) + fibonacci(n - 2) as i32; }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { return 1; }\n    else if n == 1 { return 1; }\n    else { return fibonacci(n - 1) + fibonacci(n - 2) as i32; }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    fibonacci(n) as i32;\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { return 1; }\n    else if n == 1 { return 1; }\n    else { return fibonacci(n - 1) + fibonacci(n - 2); }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
'echo \'#include <stdio.h>\n#include <stdlib.h>\n\nextern "C" {\n    int fibonacci(int n);\n}\n\nint main(int argc, char* argv[]) {\n    if (argc < 2) return 1;\n    int n = atoi(argv[1]);\n    printf("%d\\n", fibonacci(n));\n    return 0;\n}\n\n#[no_mangle]\npub extern "C" fn fibonacci(n: i32) -> i32 {\n    let n = n as usize;\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\n\nfn fibonacci(n: usize) -> u64 {\n    if n == 0 { 1 }\n    else if n == 1 { 1 }\n    else { fibonacci(n - 1) + fibonacci(n - 2) }\n}\' > /app/main.rs\n'
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
