root@2df4cc47f139:/app# echo 'fn main() { let n: usize = std::env::args().nth(1).unwrap().parse().unwrap(); println!("{}", fibonacci(n)); } fn fibonacci(n: usiz
e) -> u64 { if n == 0 { 1 } else if n == 1 { 1 } else { fibonacci(n - 1) + fibonacci(n - 2) } }' > /app/main.rs
root@2df4cc47f139:/app# cat /app/main.rs; tmux wait -S done
fn main() { let n: usize = std::env::args().nth(1).unwrap().parse().unwrap(); println!("{}", fibonacci(n)); } fn fibonacci(n: usize) -> u64 { if n == 0 { 1 } el
se if n == 1 { 1 } else { fibonacci(n - 1) + fibonacci(n - 2) } }
root@2df4cc47f139:/app# rustc /app/main.rs && ./main 5; tmux wait -S done
8
root@2df4cc47f139:/app# g++ -x c++ /app/main.rs -o cmain && ./cmain 5; tmux wait -S done
/app/main.rs:1:1: error: ‘fn’ does not name a type
    1 | fn main() { let n: usize = std::env::args().nth(1).unwrap().parse().unwrap(); println!("{}", fibonacci(n)); } fn fibonacci(n: usize) -> u64 { if n == 0
{ 1 } else if n == 1 { 1 } else { fibonacci(n - 1) + fibonacci(n - 2) } }
      | ^~
/app/main.rs:1:111: error: ‘fn’ does not name a type
    1 | fn main() { let n: usize = std::env::args().nth(1).unwrap().parse().unwrap(); println!("{}", fibonacci(n)); } fn fibonacci(n: usize) -> u64 { if n == 0
{ 1 } else if n == 1 { 1 } else { fibonacci(n - 1) + fibonacci(n - 2) } }
      |                                                                                                               ^~
root@2df4cc47f139:/app# echo 'fn main() { let n: usize = std::env::args().nth(1).unwrap().parse().unwrap(); println!("{}", fibonacci(n)); } fn fibonacci(n: usiz
e) -> u64 { if n == 0 { 1 } else if n == 1 { 1 } else { fibonacci(n - 1) + fibonacci(n - 2) } }
>
> extern "C" { void cpp_main(int n); }
>
> #[no_mangle]
> pub extern "C" fn rust_main(n: i32) { println!("{}", fibonacci(n as usize)); }
>
> int main(int argc, char* argv[]) { int n = atoi(argv[1]); cpp_main(n); return 0; }
>
> void cpp_main(int n) { printf("%d\n", fibonacci(n)); }
> ' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> extern "C" {
>     void cpp_main(int n);
> }
>
> fn main() {
>     let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();
>     println!("{}", fibonacci(n));
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn rust_main(n: i32) {
>     println!("{}", fibonacci(n as usize));
> }
>
> int main(int argc, char* argv[]) {
>     int n = atoi(argv[1]);
>     cpp_main(n);
>     return 0;
> }
>
> void cpp_main(int n) {
>     printf("%d\n", fibonacci(n));
> }' > /app/main.rs
root@2df4cc47f139:/app# cat /app/main.rs; tmux wait -S done
#include <stdio.h>
extern "C" {
    void cpp_main(int n);
}

fn main() {
    let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();
    println!("{}", fibonacci(n));
}

fn fibonacci(n: usize) -> u64 {
    if n == 0 { 1 }
    else if n == 1 { 1 }
    else { fibonacci(n - 1) + fibonacci(n - 2) }
}

#[no_mangle]
pub extern "C" fn rust_main(n: i32) {
    println!("{}", fibonacci(n as usize));
}

int main(int argc, char* argv[]) {
    int n = atoi(argv[1]);
    cpp_main(n);
    return 0;
}

void cpp_main(int n) {
    printf("%d\n", fibonacci(n));
}
root@2df4cc47f139:/app# rustc /app/main.rs && ./main 5; tmux wait -S done
error: expected one of `!` or `[`, found `include`
 --> /app/main.rs:1:2
  |
1 | #include <stdio.h>
  |  ^^^^^^^ expected one of `!` or `[`

error: aborting due to previous error

root@2df4cc47f139:/app# g++ -x c++ /app/main.rs -o cmain && ./cmain 5; tmux wait -S done
/app/main.rs:17:2: error: invalid preprocessing directive #[
   17 | #[no_mangle]
      |  ^
/app/main.rs:6:1: error: ‘fn’ does not name a type
    6 | fn main() {
      | ^~
/app/main.rs:11:1: error: ‘fn’ does not name a type
   11 | fn fibonacci(n: usize) -> u64 {
      | ^~
/app/main.rs:18:1: error: ‘pub’ does not name a type
   18 | pub extern "C" fn rust_main(n: i32) {
      | ^~~
/app/main.rs: In function ‘int main(int, char**)’:
/app/main.rs:23:13: error: ‘atoi’ was not declared in this scope
   23 |     int n = atoi(argv[1]);
      |             ^~~~
/app/main.rs: In function ‘void cpp_main(int)’:
/app/main.rs:29:20: error: ‘fibonacci’ was not declared in this scope
   29 |     printf("%d\n", fibonacci(n));
      |                    ^~~~~~~~~
root@2df4cc47f139:/app# echo '#include <stdio.h>
> extern "C" {
>     void cpp_main(int n);
> }
>
> extern "C" fn rust_main(n: i32);
>
> int main(int argc, char* argv[]) {
>     int n = atoi(argv[1]);
>     cpp_main(n);
>     return 0;
> }
>
> void cpp_main(int n) {
>     printf("%d\n", fibonacci(n));
> }
>
> fn main() {
>     let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();
>     println!("{}", fibonacci(n));
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn rust_main(n: i32) {
>     println!("{}", fibonacci(n as usize));
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn main() {
>     let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();
>     println!("{}", fibonacci(n));
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn rust_main(n: i32) {
>     println!("{}", fibonacci(n as usize));
> }
>
> fn main() {
>     let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();
>     println!("{}", fibonacci(n));
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn rust_main(n: i32) {
>     println!("{}", fibonacci(n as usize));
> }
>
> fn main() {
>     let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();
>     println!("{}", fibonacci(n));
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn rust_main(n: i32) {
>     println!("{}", fibonacci(n as usize));
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn main() {
>     let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();
>     println!("{}", fibonacci(n));
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn main() {
>     let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();
>     println!("{}", fibonacci(n));
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }
>
> fn main() {
>     let n: usize = std::env::args().nth(1).unwrap().parse().unwrap();
>     println!("{}", fibonacci(n));
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { return 1; }
>     else if n == 1 { return 1; }
>     else { return fibonacci(n - 1) + fibonacci(n - 2) as i32; }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { return 1; }
>     else if n == 1 { return 1; }
>     else { return fibonacci(n - 1) + fibonacci(n - 2) as i32; }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     fibonacci(n) as i32;
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { return 1; }
>     else if n == 1 { return 1; }
>     else { return fibonacci(n - 1) + fibonacci(n - 2); }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app# echo '#include <stdio.h>
> #include <stdlib.h>
>
> extern "C" {
>     int fibonacci(int n);
> }
>
> int main(int argc, char* argv[]) {
>     if (argc < 2) return 1;
>     int n = atoi(argv[1]);
>     printf("%d\n", fibonacci(n));
>     return 0;
> }
>
> #[no_mangle]
> pub extern "C" fn fibonacci(n: i32) -> i32 {
>     let n = n as usize;
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }
>
> fn fibonacci(n: usize) -> u64 {
>     if n == 0 { 1 }
>     else if n == 1 { 1 }
>     else { fibonacci(n - 1) + fibonacci(n - 2) }
> }' > /app/main.rs
root@2df4cc47f139:/app#
