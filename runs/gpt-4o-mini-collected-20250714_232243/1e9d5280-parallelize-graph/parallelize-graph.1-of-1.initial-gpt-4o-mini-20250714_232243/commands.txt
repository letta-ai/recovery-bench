['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
'wget https://upc.lbl.gov/download/release/berkeley_upc-2022.10.0.tar.gz\n'
'tar -xzvf berkeley_upc-2022.10.0.tar.gz\n'
'cd berkeley_upc-2022.10.0\n'
'./configure --prefix=/usr/local --disable-mpi --enable-smp --disable-ibv --disable-shmem --disable-ofi --disable-ucx\n'
'make\n'
'make install\n'
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Serial implementation of de Bruijn graph */ return 0; }' > serial.c\n"
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Parallel UPC implementation of de Bruijn graph */ return 0; }' > pgen.c\n"
"echo 'all: serial pgen\\n\\nserial: serial.c\\n\\tgcc -o serial serial.c\\n\\npgen: pgen.c\\n\\tupc -o pgen pgen.c\\n' > Makefile\n"
'make\n'
"echo 'all: serial pgen\\n\\nserial: serial.c\\n\\tgcc -o serial serial.c\\n\\npgen: pgen.c\\n\\tupc -o pgen pgen.c\\n' > Makefile\n"
'make\n'
"echo 'all: serial pgen\\n\\nserial: serial.c\\n\\t gcc -o serial serial.c\\n\\npgen: pgen.c\\n\\t upc -o pgen pgen.c\\n' > Makefile\n"
'make\n'
"echo -e 'all: serial pgen\\n\\nserial: serial.c\\n\\tgcc -o serial serial.c\\n\\npgen: pgen.c\\n\\tupc -o pgen pgen.c\\n' > Makefile\n"
'make\n'
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Serial implementation of de Bruijn graph */ return 0; }' > serial.c\n"
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Parallel UPC implementation of de Bruijn graph */ return 0; }' > pgen.c\n"
'make\n'
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Serial implementation of de Bruijn graph */ return 0; }' > serial.c\n"
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Parallel UPC implementation of de Bruijn graph */ return 0; }' > pgen.c\n"
'make\n'
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Serial implementation of de Bruijn graph */ return 0; }' > serial.c\n"
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Parallel UPC implementation of de Bruijn graph */ return 0; }' > pgen.c\n"
'make\n'
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Serial implementation of de Bruijn graph */ return 0; }' > serial.c\n"
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Parallel UPC implementation of de Bruijn graph */ return 0; }' > pgen.c\n"
'make\n'
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Serial implementation of de Bruijn graph */ return 0; }' > serial.c\n"
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Parallel UPC implementation of de Bruijn graph */ return 0; }' > pgen.c\n"
'make\n'
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Serial implementation of de Bruijn graph */ return 0; }' > serial.c\n"
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() { /* Parallel UPC implementation of de Bruijn graph */ return 0; }' > pgen.c\n"
'make\n'
'cat << EOF > serial.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main() { /* Serial implementation of de Bruijn graph */ return 0; }\nEOF\n'
'cat << EOF > pgen.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main() { /* Parallel UPC implementation of de Bruijn graph */ return 0; }\nEOF\n'
'make\n'
'which upc\n'
'upcc -v\n'
"echo 'export PATH=$PATH:/usr/local/opt/bin' >> ~/.bashrc\n"
'source ~/.bashrc\n'
'make\n'
'ls /usr/local/opt/bin\n'
'ls /usr/local/bin\n'
'make clean\n'
'make\n'
"sed -i 's/upc/upcc/g' Makefile\n"
'make\n'
'ls -la serial pgen\n'
'./serial test > serial.out\n'
'./pgen test > pgen.out\n'
'diff serial.out pgen.out\n'
'./pgen 1 test > pgen.out\n'
'diff serial.out pgen.out\n'
'export SSH_SERVERS=localhost\n'
'./pgen 1 test > pgen.out\n'
'diff serial.out pgen.out\n'
'service ssh start\n'
'./pgen 1 test > pgen.out\n'
'diff serial.out pgen.out\n'
'apt-get update\n'
'apt-get install -y openssh-server\n'
'service ssh start\n'
'./pgen 1 test > pgen.out\n'
"ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ''\n"
"ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ''\n"
'cat ~/.ssh/id_ed25519.pub >> ~/.ssh/authorized_keys\n'
'chmod 600 ~/.ssh/authorized_keys\n'
'./pgen 1 test > pgen.out\n'
'diff serial.out pgen.out\n'
'cat pgen.out\n'
'cat serial.out\n'
'cat test\n'
'vim serial.c\n'
'which nano\n'
'touch test\n'
"echo -e 'KMER\tA\tC\nKMER2\tG\tT' > test\n"
'./serial test > serial.out\n'
'diff serial.out pgen.out\n'
'cat test\n'
"echo -e 'KMER1\tA\tC\\nKMER2\tG\tT' > test\n"
'./serial test > serial.out\n'
'diff serial.out pgen.out\n'
'cat serial.c\n'
'echo \'#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() {\\n    FILE *file = fopen("test", "r");\\n    if (!file) {\\n        perror("Unable to open file!\\n");\\n        exit(1);\\n    }\\n    char kmer[100];\\n    while (fgets(kmer, sizeof(kmer), file)) {\\n        printf("%s", kmer);\\n    }\\n    fclose(file);\\n    return 0;\\n}\' > serial.c\n'
'make\n'
'./serial test > serial.out\n'
'diff serial.out pgen.out\n'
'echo \'#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() {\\n    FILE *file = fopen("test", "r");\\n    if (!file) {\\n        perror("Unable to open file!\\n");\\n        exit(1);\\n    }\\n    char kmer[100];\\n    while (fgets(kmer, sizeof(kmer), file)) {\\n        printf("%s", kmer);\\n    }\\n    fclose(file);\\n    return 0;\\n}\' > serial.c\n'
'make\n'
'./serial test > serial.out\n'
'diff serial.out pgen.out\n'
'echo \'#include <stdio.h>\\n#include <stdlib.h>\\n#include <string.h>\\n\\nint main() {\\n    FILE *file = fopen("test", "r");\\n    if (!file) {\\n        perror("Unable to open file!\\n");\\n        exit(1);\\n    }\\n    char kmer[100];\\n    while (fgets(kmer, sizeof(kmer), file)) {\\n        printf("%s", kmer);\\n    }\\n    fclose(file);\\n    return 0;\\n}\' > serial.c\n'
'make\n'
'./serial test > serial.out\n'
'diff serial.out pgen.out\n'
'cat << EOF > serial.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main() {\n    FILE *file = fopen("test", "r");\n    if (!file) {\n        perror("Unable to open file!\\n");\n        exit(1);\n    }\n    char kmer[100];\n    while (fgets(kmer, sizeof(kmer), file)) {\n        printf("%s", kmer);\n    }\n    fclose(file);\n    return 0;\n}\nEOF\n'
'make\n'
'./serial test > serial.out\n'
'diff serial.out pgen.out\n'
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
