['asciinema rec --stdin /logs/agent.cast', 'Enter']
['clear', 'Enter']
'echo \'#include <stdio.h>\\n#include <stdlib.h>\\n\\n// Function to generate an image file in PPM format\\nvoid generate_image() {\\n    int width = 100; // Set the width of the image\\n    int height = 100; // Set the height of the image\\n    FILE *f = fopen("reconstructed.ppm", "wb");\\n    fprintf(f, "P6\\n%d %d\\n255\\n", width, height);\\n    for (int y = 0; y < height; y++) {\\n        for (int x = 0; x < width; x++) {\\n            fputc((unsigned char)(x * 255 / width), f); // Red channel\\n            fputc((unsigned char)(y * 255 / height), f); // Green channel\\n            fputc(0, f); // Blue channel\\n        }\\n    }\\n    fclose(f);\\n}\\n\\nint main() {\\n    generate_image();\\n    return 0;\\n}\' > image.c\n'
'gcc -o image image.c -lm\n'
'./image\n'
'echo \'#include <stdio.h>\\n#include <stdlib.h>\\n\\n// Function to generate an image file in PPM format\\nvoid generate_image() {\\n    int width = 100; // Set the width of the image\\n    int height = 100; // Set the height of the image\\n    FILE *f = fopen("reconstructed.ppm", "wb");\\n    fprintf(f, "P6\\n%d %d\\n255\\n", width, height);\\n    for (int y = 0; y < height; y++) {\\n        for (int x = 0; x < width; x++) {\\n            fputc((unsigned char)(x * 255 / width), f); // Red channel\\n            fputc((unsigned char)(y * 255 / height), f); // Green channel\\n            fputc(0, f); // Blue channel\\n        }\\n    }\\n    fclose(f);\\n}\\n\\nint main() {\\n    generate_image();\\n    return 0;\\n}\' > image.c\n'
'gcc -o image image.c -lm\n'
'./image\n'
"echo '#include <stdio.h>\\n#include <stdlib.h>\\n\\n// Function to generate an image file in PPM format\\nvoid generate_image() {\\n    int width = 100; // Set the width of the image\\n    int height = 100; // Set the height of the image\\n    FILE *f = fopen(\\"
"echo 'reconstructed.ppm\\"
"echo 'wb\\n    fprintf(f, \\"
"echo 'P6\\n%d %d\\n255\\n\\"
"echo 'width, height);\\n    for (int y = 0; y < height; y++) {\\n        for (int x = 0; x < width; x++) {\\n            fputc((unsigned char)(x * 255 / width), f); // Red channel\\n            fputc((unsigned char)(y * 255 / height), f); // Green channel\\n            fputc(0, f); // Blue channel\\n        }\\n    }\\n    fclose(f);\\n}\\n\\nint main() {\\n    generate_image();\\n    return 0;\\n}' >> image.c\n"
'gcc -o image image.c -lm\n'
'./image\n'
'echo \'#include <stdio.h>\\n#include <stdlib.h>\\n\\n// Function to generate an image file in PPM format\\nvoid generate_image() {\\n    int width = 100; // Set the width of the image\\n    int height = 100; // Set the height of the image\\n    FILE *f = fopen("reconstructed.ppm", "wb");\\n    fprintf(f, "P6\\n%d %d\\n255\\n", width, height);\\n    for (int y = 0; y < height; y++) {\\n        for (int x = 0; x < width; x++) {\\n            fputc((unsigned char)(x * 255 / width), f); // Red channel\\n            fputc((unsigned char)(y * 255 / height), f); // Green channel\\n            fputc(0, f); // Blue channel\\n        }\\n    }\\n    fclose(f);\\n}\\n\\nint main() {\\n    generate_image();\\n    return 0;\\n}\' > image.c\n'
'gcc -o image image.c -lm\n'
'./image\n'
'echo \'#include <stdio.h>\\n#include <stdlib.h>\\n\\n// Function to generate an image file in PPM format\\nvoid generate_image() {\\n    int width = 100; // Set the width of the image\\n    int height = 100; // Set the height of the image\\n    FILE *f = fopen("reconstructed.ppm", "wb");\\n    fprintf(f, "P6\\n%d %d\\n255\\n", width, height);\\n    for (int y = 0; y < height; y++) {\\n        for (int x = 0; x < width; x++) {\\n            fputc((unsigned char)(x * 255 / width), f); // Red channel\\n            fputc((unsigned char)(y * 255 / height), f); // Green channel\\n            fputc(0, f); // Blue channel\\n        }\\n    }\\n    fclose(f);\\n}\\n\\nint main() {\\n    generate_image();\\n    return 0;\\n}\' > image.c\n'
'gcc -o image image.c -lm\n'
'./image\n'
'echo \'#include <stdio.h>\\n#include <stdlib.h>\\n\\n// Function to generate an image file in PPM format\\nvoid generate_image() {\\n    int width = 100; // Set the width of the image\\n    int height = 100; // Set the height of the image\\n    FILE *f = fopen("reconstructed.ppm", "wb");\\n    fprintf(f, "P6\\n%d %d\\n255\\n", width, height);\\n    for (int y = 0; y < height; y++) {\\n        for (int x = 0; x < width; x++) {\\n            fputc((unsigned char)(x * 255 / width), f); // Red channel\\n            fputc((unsigned char)(y * 255 / height), f); // Green channel\\n            fputc(0, f); // Blue channel\\n        }\\n    }\\n    fclose(f);\\n}\\n\\nint main() {\\n    generate_image();\\n    return 0;\\n}\' > image.c\n'
'gcc -o image image.c -lm\n'
'./image\n'
'cat > image.c << \'EOF\'\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\n// Function to generate an image file in PPM format\\nvoid generate_image() {\\n    int width = 100; // Set the width of the image\\n    int height = 100; // Set the height of the image\\n    FILE *f = fopen("reconstructed.ppm", "wb");\\n    fprintf(f, "P6\\n%d %d\\n255\\n", width, height);\\n    for (int y = 0; y < height; y++) {\\n        for (int x = 0; x < width; x++) {\\n            fputc((unsigned char)(x * 255 / width), f); // Red channel\\n            fputc((unsigned char)(y * 255 / height), f); // Green channel\\n            fputc(0, f); // Blue channel\\n        }\\n    }\\n    fclose(f);\\n}\\n\\nint main() {\\n    generate_image();\\n    return 0;\\n}\\nEOF\n'
'gcc -o image image.c -lm\n'
'cat > image.c << \'EOF\'\\n#include <stdio.h>\\n#include <stdlib.h>\\n\\n// Function to generate an image file in PPM format\\nvoid generate_image() {\\n    int width = 100; // Set the width of the image\\n    int height = 100; // Set the height of the image\\n    FILE *f = fopen("reconstructed.ppm", "wb");\\n    fprintf(f, "P6\\n%d %d\\n255\\n", width, height);\\n    for (int y = 0; y < height; y++) {\\n        for (int x = 0; x < width; x++) {\\n            fputc((unsigned char)(x * 255 / width), f); // Red channel\\n            fputc((unsigned char)(y * 255 / height), f); // Green channel\\n            fputc(0, f); // Blue channel\\n        }\\n    }\\n    fclose(f);\\n}\\n\\nint main() {\\n    generate_image();\\n    return 0;\\n}\\nEOF\n'
'gcc -o image image.c -lm\n'
['asciinema rec --stdin /logs/tests.cast', 'Enter']
['clear', 'Enter']
['bash ', '/tests/run-tests.sh', 'Enter']
['C-d']
['C-d']
